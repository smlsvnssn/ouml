/*
TypelessScript
Proxy som kan chaina metoder p친 alla typer. Pipe on speed 游뱕. Closure runt ett v칛rde, returnera this. Return som special keyword. Inspect f칬r debugging kanske? Och f() f칬r customfunktioner? Vilken typ man har f친r man h친lla reda p친 sj칛lv 游땏. Eller option p친 att logga v칛rde/typ f칬r varje steg?
Async f칬rst친s? Eller? G친r det? Yepp!

*/

import * as 칬 from '../칬.mjs'

const lookupMethod = (key, val, isThrowing) => {
    // check for methods on val
    if (칬.isFunc(val[key])) return (...args) => val[key](...args)

    // check for props on val
    if (칬.is(val[key])) return () => val[key]

    // check for methods on 칬
    if (칬.isFunc(칬[key])) return (...args) => 칬[key](val, ...args)

    const keys = key.split('_')

    // check for methods on globalThis, but only if not compound key
    if (keys.length === 1 && 칬.isFunc(globalThis[key]))
        return (...args) => globalThis[key](val, ...args)

    // check for methods on global objects
    if (keys.length === 2 && 칬.isFunc(globalThis[keys.at(0)]?.[keys.at(1)]))
        return (...args) => globalThis[keys.at(0)][keys.at(1)](val, ...args)

    const errorMsg = `No method or property found for ${key} on type ${
        val.constructor.name
    }, and no method for ${keys.join('.')} found in 칬 or in global scope.`

    if (isThrowing) throw new Error(errorMsg)
    칬.warn(`${errorMsg} Skipping.`)

    return () => val
}

const peek = (i, key, val) =>
    칬.log(`
Peeking into chain after step ${i}, running ${key}():
Value: ${JSON.stringify(val, null, 2)}
Type:  ${val.constructor.name}
`)

const warn = (i, key, error, isThrowing) => {
    const errorMsg = `Chain failed at step ${i} for method ${key}.`
    if (isThrowing) throw new Error(errorMsg + '\n' + error)
    칬.warn(`${errorMsg} Skipping:`, error)
}

const createProxy = (o, isAsync, isThrowing) => {
    const q = []

    const caseRunQ = isAsync
        ? async () => {
              for (const [i, [key, f]] of q.entries()) {
                  if (key === 'returnIf' && (await f())) break
                  if (key === 'peek') {
                      peek(i, q[i - 1][0], o.val)
                      continue
                  }
                  try {
                      await f(o.val)
                  } catch (error) {
                      warn(i, key, error, isThrowing)
                  }
              }
              return o.val
          }
        : () => {
              for (const [i, [key, f]] of q.entries()) {
                  if (key === 'returnIf' && f()) break
                  if (key === 'peek') {
                      peek(i - 1, q[i - 1][0], o.val)
                      continue
                  }
                  try {
                      f(o.val)
                  } catch (error) {
                      warn(i, key, error, isThrowing)
                  }
              }
              return o.val
          }

    const caseReturnIf = key => f => {
        q.push([key, isAsync ? async () => await f(o.val) : () => f(o.val)])
        return p
    }

    const caseFunction = key => f => {
        q.push([
            key,
            isAsync
                ? async () => (o.val = await f(o.val))
                : () => (o.val = f(o.val)),
        ])
        return p
    }

    const casePeek = key => () => {
        q.push([key])
        return p
    }

    const caseDefault =
        key =>
        (...args) => {
            q.push([
                key,
                isAsync
                    ? async () =>
                          (o.val = await lookupMethod(
                              key,
                              o.val,
                              isThrowing,
                          )(...args))
                    : () =>
                          (o.val = lookupMethod(
                              key,
                              o.val,
                              isThrowing,
                          )(...args)),
            ])
            return p
        }

    const p = new Proxy(o, {
        get: (_, key) => {
            if (key === 'value') return caseRunQ()
            if (key === 'return') return caseRunQ
            if (key === 'returnIf') return caseReturnIf(key)
            if (key === 'peek') return casePeek(key)
            if (key === 'f') return caseFunction(key)
            return caseDefault(key)
        },
    })
    return p
}

export const chain = (val, isThrowing = false, isAsync = false) =>
    createProxy({ val: 칬.clone(val) }, isAsync, isThrowing)

export const chainAsync = (val, isThrowing = false) =>
    createProxy({ val: 칬.clone(val) }, true, isThrowing)
