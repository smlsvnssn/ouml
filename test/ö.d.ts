export function grid(width: any, height: any): Generator<{
    x: number;
    y: number;
}, void, unknown>;
export function range(start: any, end: any, step?: number): Generator<any, void, unknown>;
export function times(times: any, f?: (i: any) => any, ...rest: any[]): any[];
export function rangeArray(start: any, end: any, step?: number): any[];
export function unique(arr: any): any[];
export function shuffle(arr: any): any[];
export function sample(arr: any, samples?: number): any;
export function sum(arr: any): number;
export function mean(arr: any): number;
export function median(arr: any): number;
export function max(arr: any): number;
export function min(arr: any): number;
export function groupBy(arr: any, prop: any): any;
export function intersect(a: any, b: any): any[];
export function subtract(a: any, b: any): any[];
export function exclude(a: any, b: any): any;
export function union(a: any, b: any): any[];
export function isSubset(a: any, b: any): any;
export function createElement(html: any, isSvg?: boolean): ChildNode;
export function parseDOMStringMap(o: any): any;
export function data(element: any, key: any, value: any): any;
export function deepest(element: any, selector?: string): any;
export function isEqual(a: any, b: any, deep?: boolean): any;
export function clone(v: any, deep?: boolean): any;
export function pipe(v: any, ...funcs: any[]): any;
export function memoise(f: any, keymaker: any): (...args: any[]) => any;
export function random(min: any, max: any, float?: boolean): any;
export function randomNormal(mean?: number, sigma?: number): number;
export function round(n: any, precision?: number): number;
export function nthRoot(x: any, n: any): number;
export function lerp(a: any, b: any, t: any): number;
export function clamp(n: any, min: any, max: any): number;
export function between(n: any, min: any, max: any): boolean;
export function normalize(n: any, min: any, max: any, clamp?: boolean): any;
export function prettyNumber(n: any, locale?: string, precision?: number): string;
export function wrapFirstWords(s: any, numWords?: number, startWrap?: string, endWrap?: string, startAtChar?: number): any;
export function toCamelCase(s: any): any;
export function toKebabCase(s: any): any;
export function randomChars(): string;
export function toHsla(c: any, asString?: boolean): string | {
    h: number;
    s: number;
    l: number;
    a: any;
};
export function hsla(h: any, s?: number, l?: number, a?: number): string;
export function wait(t: number, f: any, resetPrevCall?: boolean): Promise<void>;
export function nextFrame(f: any): Promise<any>;
export function waitFrames(n: number, f: any, everyFrame?: boolean): Promise<void>;
export function waitFor(selector: any, event: any, f: any): Promise<any>;
export function load(url: any, isJSON?: boolean): Promise<any>;
export function isBool(v: any): boolean;
export function isNum(v: any): boolean;
export function isInt(v: any): boolean;
export function isBigInt(v: any): boolean;
export function isStr(v: any): boolean;
export function isSym(v: any): boolean;
export function isFunc(v: any): boolean;
export function isnt(v: any): boolean;
export function is(v: any): boolean;
export function isNull(v: any): boolean;
export function isArr(v: any): boolean;
export function isDate(v: any): boolean;
export function isMap(v: any): boolean;
export function isSet(v: any): boolean;
export function isRegex(v: any): boolean;
export function isObj(v: any): boolean;
export function isIterable(v: any): boolean;
export function throttle(f: any, t?: number, debounce?: boolean, immediately?: boolean): (...args: any[]) => void;
export function debounce(f: any, t?: number, immediately?: boolean): (...args: any[]) => void;
export function onAnimationFrame(f: any): (...args: any[]) => void;
export function verbose(v: any, t?: boolean): boolean;
export function error(e: any, ...r: any[]): any;
export function warn(msg: any, ...r: any[]): any;
export function log(...msg: any[]): any;
export function message(s: any): string;
export function toString(): string;
export function rorövovarorsospoproråkoketot(s: any): any;
